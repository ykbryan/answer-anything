type Room
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, provider: userPools, operations: [read, update] }
      { allow: private, provider: iam, operations: [read, update] }
    ]
  ) {
  id: ID!
  title: String!
  owner: String
  status: RoomStatus!
  rating: Float
  messages: [Message] @connection(name: "RoomMessages")
  createdAt: String
  updatedAt: String
}

enum RoomStatus {
  ACTIVE
  INACTIVE
}

type Message
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
  owner: String
  room: Room @connection(name: "RoomMessages")
  status: MessageStatus!
  rates: [Rate] @connection(name: "MessageRates")
}

enum MessageStatus {
  ANSWERED
  UNANSWERED
}

type Rate
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  owner: String
  message: Message @connection(name: "MessageRates")
}

type Query {
  posts: [Post] @function(name: "answeranythingposts-${env}") @aws_iam
  getWeather: WeatherAPI
    @http(
      url: "https://api.openweathermap.org/data/2.5/weather?q=:query&units=:units&APPID=:appid"
    )
    @aws_iam
}
type Post @aws_iam {
  id: ID!
  title: String!
  comments: [Comment] @function(name: "answeranythingposts-${env}")
}
type Comment @aws_iam {
  postId: ID!
  content: String
}
type WeatherAPI @aws_iam {
  id: ID!
  name: String!
  base: String
  cod: String
  message: String
  main: WeatherMain
  sys: WeatherSys
  weather: [Weather]
  wind: WeatherWind
}
type WeatherMain @aws_iam {
  feels_like: Float
  humidity: Int
  pressure: Int
  temp: Float
}
type WeatherSys @aws_iam {
  country: String
  sunrise: Int
  sunset: Int
}
type Weather @aws_iam {
  description: String
  icon: String
  main: String
}
type WeatherWind @aws_iam {
  deg: Int
  speed: Float
}
